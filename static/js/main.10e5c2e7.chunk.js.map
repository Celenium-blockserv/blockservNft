{"version":3,"sources":["contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","components/SmartContractInteraction/Title.jsx","components/SmartContractInteraction/Contract.jsx","components/SmartContractInteraction/ContractBtns.jsx","components/SmartContractInteraction/NoticeNoArtifact.jsx","components/SmartContractInteraction/NoticeWrongNetwork.jsx","components/SmartContractInteraction/MintBatch.jsx","components/SmartContractInteraction/MintBatchBtn.jsx","components/SmartContractInteraction/index.jsx","components/Gallery/Title.jsx","content/DataUtils.js","components/Gallery/index.jsx","components/Workflow/index.jsx","components/NftImagesUpload/Title.jsx","components/NftImagesUpload/index.jsx","components/NftJsonFilesUpload/Title.jsx","components/NftJsonFilesUpload/index.jsx","components/EmployeesUpload/Title.jsx","components/EmployeesUpload/index.jsx","components/IpfsImagesGallery/Title.jsx","components/IpfsImagesGallery/index.jsx","components/Main/index.jsx","App.jsx","index.js"],"names":["EthContext","createContext","actions","initialState","artifact","web3","accounts","networkID","contract","reducer","state","action","type","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","Web3","givenProvider","eth","requestAccounts","net","getId","abi","address","networks","Contract","err","console","error","useEffect","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener","Provider","value","useEth","useContext","Title","collectionName","spanEle","useRef","current","classList","add","flash","setTimeout","remove","clearTimeout","className","ref","ContractBtns","setCollectionName","name","methods","call","from","onClick","NoticeNoArtifact","NoticeWrongNetwork","MintBatch","jsonFilesList","map","file","ipfs","MintBachBtns","employeesList","useState","ipfsJsonFilesList","setIpfsJsonFilesList","batchMint","recipients","i","length","send","SmartContractInteraction","demo","MintBatchBtn","options","size","bgColor","fgColor","level","includeMargin","getImages","src","Math","floor","random","height","author","Gallery","images","setImages","View","style","flex","justifyContent","alignItems","image","Image","source","uri","width","styles","StyleSheet","create","baseText","fontFamily","titleText","fontSize","fontWeight","Workflow","Text","numberOfLines","href","NFTStorage","input","margin","borderWidth","padding","dropzone","border","NftImagesUpload","setUploadedIpfsImagesList","nftApiKey","onChangeNftApiKey","choosenNftImagesList","onChangeChoosenNftImagesList","NFTStorageClient","uploadFiles","log","imagesToUpload","push","File","path","token","storeDirectory","cid","ipfsImagesList","TextInput","onChangeText","onDrop","acceptedFiles","getRootProps","getInputProps","NftJsonFilesUpload","setUploadedJsonFilesList","choosenNftJsonFilesList","onChangeChoosenNftJsonFilesList","parse","reader","FileReader","readAsText","Promise","resolve","reject","onload","event","result","setImageAddressInList","selectedFiles","cidForReplace","fileContent","replacedContent","toFile","JSON","jsonObject","fileName","ipfsImageAddr","replace","jsonAsString","stringify","myBlob","Blob","EmployeesUpload","setUploadedEmployeesList","selectedFile","setSelectedFile","setEmployeesList","array","toString","split","employees","employee","employeeId","mnemonic","privateKey","IpfsImagesGallery","Main","setCid","setIpfsImagesList","setJsonFilesList","childData","App","id","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.10e5c2e7.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport {\n  actions,\n  initialState,\n  reducer\n};\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n        } catch (err) {\n          console.error(err);\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract }\n        });\n      }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        // const artifact = require(\"../../contracts/SimpleStorage.json\");\n        const artifact = require(\"../../contracts/NFTS.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","function Title() {\n  return <h2>Interaction with smart contract</h2>;\n}\n\nexport default Title;\n","import { useRef, useEffect } from \"react\";\n\nfunction Contract({ collectionName }) {\n  const spanEle = useRef(null);\n\n  useEffect(() => {\n    spanEle.current.classList.add(\"flash\");\n    const flash = setTimeout(() => {\n      spanEle.current.classList.remove(\"flash\");\n    }, 300);\n    return () => {\n      clearTimeout(flash);\n    };\n  }, [collectionName]);\n\n  return (\n    <code>\n      {`Collection name = `}\n\n      <span className=\"secondary-color\" ref={spanEle}>\n        <strong>{collectionName}</strong>\n      </span>\n\n\n    </code>\n  );\n}\n\nexport default Contract;\n","import useEth from \"../../contexts/EthContext/useEth\";\n\nfunction ContractBtns({ setCollectionName }) {\n  const { state: { contract, accounts } } = useEth();\n\n  const name = async () => {\n    const value = await contract.methods.name().call({ from: accounts[0] });\n    setCollectionName(value);\n  };\n\n\n\n  return (\n    <div className=\"btns\">\n\n      <button onClick={name}>\n        name()\n      </button>\n\n    </div>\n  );\n}\n\nexport default ContractBtns;\n","function NoticeNoArtifact() {\n  return (\n    <p>\n      ⚠️ Cannot find <span className=\"code\">Nfts</span> contract artifact.\n      Please complete the above preparation first, then restart the react dev server.\n    </p>\n  );\n}\n\nexport default NoticeNoArtifact;\n","function NoticeWrongNetwork() {\n  return (\n    <p>\n      ⚠️ MetaMask is not connected to the same network as the one you deployed to.\n    </p>\n  );\n}\n\nexport default NoticeWrongNetwork;\n","import { useRef, useEffect } from \"react\";\n\nfunction MintBatch({ jsonFilesList }) {\n  const spanEle = useRef(null);\n\n  useEffect(() => {\n    spanEle.current.classList.add(\"flash\");\n    const flash = setTimeout(() => {\n      spanEle.current.classList.remove(\"flash\");\n    }, 300);\n    return () => {\n      clearTimeout(flash);\n    };\n  }, [jsonFilesList]);\n\n  return (\n    <code>\n      {`File to mint: `}\n\n      <span className=\"secondary-color\" ref={spanEle}>\n        <strong>{jsonFilesList.map(file => file.ipfs)}</strong>\n      </span>\n\n\n    </code>\n  );\n}\n\nexport default MintBatch;\n","import {useEffect, useState} from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\n\nfunction MintBachBtns({ jsonFilesList,  employeesList}) {\n  const { state: { contract, accounts } } = useEth();\n  const [ipfsJsonFilesList, setIpfsJsonFilesList] = useState([]);\n\n\n\n  useEffect(() => {\n   setIpfsJsonFilesList(jsonFilesList.map(file => file.ipfs))\n  }, [jsonFilesList]);\n\n\n  const batchMint = async () => {\n      let recipients= [];\n      for(let i=0;i<ipfsJsonFilesList.length;i++){\n          recipients[i]=employeesList[i].address;\n      }\n    await contract.methods.batchMint(recipients, ipfsJsonFilesList,).send( { from: accounts[0] });\n\n  };\n\n\n\n  return (\n    <div className=\"btns\">\n\n      <button onClick={batchMint}>\n        name({accounts[0]}, {ipfsJsonFilesList})\n      </button>\n\n    </div>\n  );\n}\n\nexport default MintBachBtns;\n","import React, { useState } from \"react\";\nimport useEth from \"../../contexts/EthContext/useEth\";\nimport Title from \"./Title\";\nimport Contract from \"./Contract\";\nimport ContractBtns from \"./ContractBtns\";\nimport NoticeNoArtifact from \"./NoticeNoArtifact\";\nimport NoticeWrongNetwork from \"./NoticeWrongNetwork\";\nimport MintBatch from \"./MintBatch\";\nimport MintBatchBtn from \"./MintBatchBtn\";\nimport {QRCodeSVG} from 'qrcode.react';\n\nfunction SmartContractInteraction({jsonFilesList, employeesList}) {\n    const { state } = useEth();\n\n    const [collectionName, setCollectionName] = useState(\"?\");\n\n\n    const demo =\n    <>\n      <div className=\"contract-container\">\n        <Contract collectionName={collectionName} />\n        <ContractBtns setCollectionName={setCollectionName} />\n      </div>\n        <br/>\n        <div className=\"contract-container\">\n            <MintBatch jsonFilesList={jsonFilesList} />\n            <MintBatchBtn jsonFilesList={jsonFilesList}  employeesList={employeesList}/>\n        </div>\n        {\n            state.contract ? <QRCodeSVG\n                    value={'https://testnets.opensea.io/fr/assets/rinkeby/' + state.contract.options.address + '/1'}\n                    size={128}\n                    bgColor={\"#ffffff\"}\n                    fgColor={\"#000000\"}\n                    level={\"L\"}\n                    includeMargin={false}\n                /> :\n                    'no contract'\n        }\n\n\n\n    </>;\n\n  return (\n    <div className=\"demo\">\n      <Title />\n      {\n        !state.artifact ? <NoticeNoArtifact /> :\n          !state.contract ? <NoticeWrongNetwork /> :\n            demo\n      }\n    </div>\n  );\n}\n\nexport default SmartContractInteraction;\n","function Title() {\n  return <h2>NFT visualisation</h2>;\n}\n\nexport default Title;\n","const getImages = () => {\n    let images = [\n        {\n            src: `https://source.unsplash.com/random/500x500?sig=${Math.floor(Math.random() * 999)}`,\n            height: 500,\n            author: 'Awesome'\n        }, {\n            src: `https://source.unsplash.com/random/500x400?sig=${Math.floor(Math.random() * 999)}`,\n            height: 400,\n            author: 'Awesome'\n        }, {\n            src: `https://source.unsplash.com/random/500x700?sig=${Math.floor(Math.random() * 999)}`,\n            height: 700,\n            author: 'Awesome'\n        }, {\n            src: `https://source.unsplash.com/random/500x250?sig=${Math.floor(Math.random() * 999)}`,\n            height: 250,\n            author: 'Awesome'\n        }, {\n            src: `https://source.unsplash.com/random/500x800?sig=${Math.floor(Math.random() * 999)}`,\n            height: 800,\n            author: 'Awesome'\n        }, {\n            src: `https://source.unsplash.com/random/500x500?sig=${Math.floor(Math.random() * 999)}`,\n            height: 500,\n            author: 'Awesome'\n        }, {\n            src: `https://bafybeidge37zjygas54nhiadcnuhzmbzwpkqalqucjwinhm7g5sallxcd4.ipfs.nftstorage.link/1.png`,\n            height: 500,\n            author: 'Awesome'\n        }\n    ]\n    return images;\n}\n\nexport default getImages;","import React, { useState, useEffect } from \"react\";\nimport {  View, Image } from 'react-native';\n\nimport Title from \"./Title\";\n\n\nimport getImages from \"../../content/DataUtils\";\n\nfunction Gallery() {\n    const [images, setImages] = useState([]);\n\n   // setImages(getImages());\n    useEffect(() => {\n        setImages(getImages());\n    }, []);\n\n  return (\n    <div className=\"demo\">\n      <Title />\n\n        <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n            <div className=\"grid-container\">\n                {\n                    images.map((image,i) => {\n                        return (\n                            <div key={i} className=\"grid-item\">\n                                <Image\n                                    source={{uri: image.src}}\n                                    style={{width: 200, height: 200}}\n                                />\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </View>\n    </div>\n  );\n}\n\nexport default Gallery;\n","import React from \"react\";\nimport { Text, StyleSheet } from \"react-native\";\n\nconst styles = StyleSheet.create({\n    baseText: {\n        fontFamily: \"Arial\"\n    },\n    titleText: {\n        fontSize: 30,\n        fontWeight: \"bold\"\n    }\n});\nfunction Workflow() {\n\n  return (\n          <Text style={styles.baseText}>\n              <Text style={styles.titleText}>\n                  Workflow\n                  {\"\\n\"}\n                  {\"\\n\"}\n              </Text>\n              <Text numberOfLines={6}>\n                  Uploader les fichiers d'image\n                  {\"\\n\"}\n                  Recuperer le cid\n                  {\"\\n\"}\n                  Recuperer les json et mettre dedans l'uri des images\n                  {\"\\n\"}\n                  Uploader les JSON et recuperer le cid\n                  {\"\\n\"}\n                  Ensuite: modifier le NFTS contract avec le cid des json</Text>\n          </Text>\n  );\n}\n\nexport default Workflow;\n","import React from \"react\";\nimport { Text, StyleSheet } from \"react-native\";\n\nconst styles = StyleSheet.create({\n  baseText: {\n    fontFamily: \"Arial\"\n  },\n  titleText: {\n    fontSize: 30,\n    fontWeight: \"bold\"\n  }\n});\n\nconst nftStorageUrl = 'https://nft.storage/manage/';\n\nfunction Title() {\n  return (\n      <Text style={styles.baseText}>\n        <Text style={styles.titleText}>\n          NFT image upload\n          {\"\\n\"}\n          {\"\\n\"}\n        </Text>\n        <Text numberOfLines={6}>\n          Please set the NFT Storage API Key from <a href={nftStorageUrl} className=\"button\">NFTStorage</a>\n          {\"\\n\"}\n          Then use the file selector to select your images\n          {\"\\n\"}\n          Then clic on upload\n          {\"\\n\"}\n          {\"\\n\"}</Text>\n      </Text>\n  );\n}\n\nexport default Title;\n","import {useState} from \"react\";\nimport Title from \"./Title\";\nimport React from \"react\";\nimport {Text, StyleSheet, TextInput} from \"react-native\";\nimport Dropzone from \"react-dropzone\";\n\nconst {NFTStorage} = require(\"nft.storage/dist/bundle.esm.min.js\");\n\n\nconst styles = StyleSheet.create({\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n    dropzone: {\n        padding: 20,\n        border: \"3px blue dashed\",\n        width: '60%',\n        margin: 'auto'\n    }\n});\n\nfunction NftImagesUpload({setUploadedIpfsImagesList}) {\n\n    const [nftApiKey, onChangeNftApiKey] = useState(\"\");\n    const [choosenNftImagesList, onChangeChoosenNftImagesList] = useState([]);\n\n    let NFTStorageClient = {};\n\n    const uploadFiles = async () => {\n        console.log('uploadFiles');\n        let imagesToUpload = []\n        choosenNftImagesList.forEach(file => {\n            console.log(file);\n            imagesToUpload.push(new File([file], file.path))\n        })\n        console.log(imagesToUpload);\n        NFTStorageClient = new NFTStorage({token: nftApiKey});\n\n        const cid = await NFTStorageClient.storeDirectory(imagesToUpload);\n        console.log(cid);\n        console.log('https://' + cid + '.ipfs.nftstorage.link');\n\n        let ipfsImagesList = choosenNftImagesList.map(file => {\n            return {\n                'cid': cid,\n                path: 'https://' + cid + '.ipfs.nftstorage.link/' + file.path,\n                ipfs: 'ipfs://' + cid + '/' + file.path\n            }\n        })\n        console.log(ipfsImagesList);\n        setUploadedIpfsImagesList(ipfsImagesList);\n\n    };\n\n    return (\n        <div className=\"demo\">\n            <Title/>\n            <Text>Api Key = </Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={onChangeNftApiKey}\n                value={nftApiKey}\n            />\n            <div style={styles.dropzone}>\n                <Dropzone onDrop={acceptedFiles => {\n                    onChangeChoosenNftImagesList(acceptedFiles);\n                    console.log(acceptedFiles);\n                }}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop NFT Images to upload</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n\n            </div>\n            <ul>\n                {\n                    choosenNftImagesList.map((file) => (\n                        <li key={file.path}>\n                            {file.path} - {file.size} bytes\n                        </li>\n                    ))\n                }\n            </ul>\n            <button type=\"submit\" className=\"btn\" onClick={uploadFiles}>Upload files</button>\n\n        </div>\n    );\n}\n\nexport default NftImagesUpload;\n","import React from \"react\";\nimport { Text, StyleSheet } from \"react-native\";\n\nconst styles = StyleSheet.create({\n  baseText: {\n    fontFamily: \"Arial\"\n  },\n  titleText: {\n    fontSize: 30,\n    fontWeight: \"bold\"\n  }\n});\n\nconst nftStorageUrl = 'https://nft.storage/manage/';\n\nfunction Title() {\n  return (\n      <Text style={styles.baseText}>\n        <Text style={styles.titleText}>\n          NFT json files upload\n          {\"\\n\"}\n          {\"\\n\"}\n        </Text>\n        <Text numberOfLines={6}>\n          Please set the NFT Storage API Key from <a href={nftStorageUrl} className=\"button\">NFTStorage</a>\n          {\"\\n\"}\n          Then use the file selector to select your json files\n          {\"\\n\"}\n          Then clic on upload\n          {\"\\n\"}\n          {\"\\n\"}</Text>\n      </Text>\n  );\n}\n\nexport default Title;\n","import {useState} from \"react\";\nimport Title from \"./Title\";\nimport React from \"react\";\nimport {Text, StyleSheet, TextInput} from \"react-native\";\nimport Dropzone from \"react-dropzone\";\n\nconst {NFTStorage} = require(\"nft.storage/dist/bundle.esm.min.js\");\n\n\nconst styles = StyleSheet.create({\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n    dropzone: {\n        padding: 20,\n        border: \"3px blue dashed\",\n        width: '60%',\n        margin: 'auto'\n    }\n});\n\nfunction NftJsonFilesUpload({setUploadedJsonFilesList, cid}) {\n\n    const [nftApiKey, onChangeNftApiKey] = useState(\"\");\n    const [choosenNftJsonFilesList, onChangeChoosenNftJsonFilesList] = useState([]);\n\n    let NFTStorageClient = {};\n\n\n    async function parse(file) {\n        const reader = new FileReader();\n        reader.readAsText(file);\n        const result = await new Promise((resolve, reject) => {\n            reader.onload = function(event) {\n                resolve(reader.result)\n            }\n        })\n        console.log(result)\n        return result;\n    }\n\n\n    async function setImageAddressInList(selectedFiles, cidForReplace) {\n        let acceptedFiles = [];\n\n        // mettre cela dans une async\n        for(let file of selectedFiles) {\n            let fileContent = await parse(file);\n            let replacedContent = toFile(JSON.parse(fileContent), file.name, cidForReplace);\n            acceptedFiles.push(replacedContent);\n        }\n\n        console.log(acceptedFiles)\n        return acceptedFiles;\n    }\n\n    function toFile(jsonObject, fileName, cid) {\n        // NewUriToReplace\n        let ipfsImageAddr = jsonObject.image;\n        ipfsImageAddr = ipfsImageAddr.replace('NewUriToReplace', cid);\n        jsonObject.image = ipfsImageAddr;\n        console.log(jsonObject);\n        let jsonAsString = JSON.stringify(jsonObject);\n        let myBlob = new Blob([jsonAsString], {type: \"application/json\"});\n        let file = new File([myBlob], fileName);\n        return file;\n    }\n\n    const uploadFiles = async () => {\n        console.log('uploadFiles');\n        NFTStorageClient = new NFTStorage({token: nftApiKey});\n\n        const cid = await NFTStorageClient.storeDirectory(choosenNftJsonFilesList);\n        console.log(cid);\n        console.log('https://' + cid + '.ipfs.nftstorage.link');\n\n        let ipfsJsonFilesList = choosenNftJsonFilesList.map(file => {\n            return {\n                'cid': cid,\n                path: 'https://' + cid + '.ipfs.nftstorage.link/' + file.name,\n                ipfs: 'ipfs://' + cid + '/' + file.name\n            }\n        })\n        console.log('ipfsJsonFilesList');\n        console.log(ipfsJsonFilesList);\n        setUploadedJsonFilesList(ipfsJsonFilesList);\n\n    };\n\n    return (\n        <div className=\"demo\">\n            <Title/>\n            <Text>Api Key = </Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={onChangeNftApiKey}\n                value={nftApiKey}\n            />\n            <div style={styles.dropzone}>\n                <Dropzone onDrop={async (selectedFiles) => {\n                    // Replace NewUriToReplace by cid of images in json files\n                    let acceptedFiles = await setImageAddressInList(selectedFiles,cid)\n                    onChangeChoosenNftJsonFilesList(acceptedFiles);\n                    console.log('acceptedFiles');\n                    console.log(acceptedFiles);\n\n                }}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop NFT json files to upload</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n\n            </div>\n            <ul>\n                {\n                    choosenNftJsonFilesList.map((file) => (\n                        <li key={file.name}>\n                            {file.name} - {file.size} bytes\n                        </li>\n                    ))\n                }\n            </ul>\n            <button type=\"submit\" className=\"btn\" onClick={uploadFiles}>Upload files</button>\n\n        </div>\n    );\n}\n\nexport default NftJsonFilesUpload;\n","import React from \"react\";\nimport { Text, StyleSheet } from \"react-native\";\n\nconst styles = StyleSheet.create({\n  baseText: {\n    fontFamily: \"Arial\"\n  },\n  titleText: {\n    fontSize: 30,\n    fontWeight: \"bold\"\n  }\n});\n\n\nfunction Title() {\n  return (\n      <Text style={styles.baseText}>\n        <Text style={styles.titleText}>\n          Employees csv file Upload\n          {\"\\n\"}\n          {\"\\n\"}\n        </Text>\n        <Text numberOfLines={6}>\n          The .csv file to upload should be in the form:\n            {\"\\n\"}\n            [\"employeeId\", \"mnemonic\", \"address\",\"private_key\", \"public_key\", \"compressed_public_key\"]\n            {\"\\n\"}\n          {\"\\n\"}</Text>\n      </Text>\n  );\n}\n\nexport default Title;\n","import React  from 'react';\nimport {StyleSheet} from 'react-native';\nimport {useState} from \"react\";\nimport Title from \"./Title\";\nimport Dropzone from \"react-dropzone\";\n\nconst styles = StyleSheet.create({\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 10,\n    },\n    dropzone: {\n        padding: 20,\n        border: \"3px blue dashed\",\n        width: '60%',\n        margin: 'auto'\n    }\n});\n\nfunction EmployeesUpload({setUploadedEmployeesList}) {\n\n    const [selectedFile, setSelectedFile] = useState('No file selected yet');\n    const [employeesList, setEmployeesList] = useState([]);\n\n    async function parse(file) {\n        const reader = new FileReader();\n        reader.readAsText(file);\n        const result = await new Promise((resolve, reject) => {\n            reader.onload = function (event) {\n                resolve(reader.result)\n            }\n        })\n        console.log(result)\n        return result;\n    }\n\n\n    async function loadFile() {\n\n        let fileContent = await parse(selectedFile);\n        const array = fileContent.toString().split(\"\\n\");\n  //      emploeesTable.tableHead = array[0].split(\",\")\n        let employees = []\n        for (let i = 1; i < array.length - 1; i++) {\n            const employee = array[i].split(\",\")\n// [\"employeeId\", \"mnemonic\", \"address\",\"private_key\", \"public_key\", \"compressed_public_key\"]\n            employees.push({\n                employeeId: employee[0],\n                mnemonic: employee[1],\n                address: employee[2],\n                privateKey: employee[3],\n            })\n            setUploadedEmployeesList(employees)\n            setEmployeesList(employees)\n        }\n\n    }\n\n    return (\n        <div className=\"demo\">\n            <Title/>\n\n            <div style={styles.dropzone}>\n                <Dropzone onDrop={(selectedFile) => {\n                    console.log(selectedFile)\n                    setSelectedFile(selectedFile[0]);\n                }}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop the CSV file to upload</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n                {selectedFile.path}\n            </div>\n            <div className=\"scroll\">\n            <ul>\n                {\n                    employeesList.map((employee) => (\n                        <li key={employee.employeeId}>\n                            {employee.employeeId} - {employee.mnemonic}- {employee.address}- {employee.privateKey}\n                        </li>\n                    ))\n                }\n            </ul>\n            </div>\n            <button type=\"submit\" className=\"btn\" onClick={loadFile}>Load CSV files</button>\n\n        </div>\n    );\n}\n\nexport default EmployeesUpload;\n","function Title() {\n  return <h2>IPFS uploaded image gallery</h2>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport {  View, Image } from 'react-native';\n\nimport Title from \"./Title\";\n\n\nfunction IpfsImagesGallery({images}) {\n\n\n\n  return (\n    <div className=\"demo\">\n      <Title />\n\n        <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n            <div className=\"grid-container\">\n                {\n                    images.map((image,i) => {\n                        return (\n                            <div key={i} className=\"grid-item\">\n                                <Image\n                                    source={{uri: image.path}}\n                                    style={{width: 200, height: 200}}\n                                />\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </View>\n    </div>\n  );\n}\n\nexport default IpfsImagesGallery;\n","import SmartContractInteraction from \"../SmartContractInteraction\";\nimport Gallery from \"../Gallery\";\nimport Workflow from \"../Workflow\";\nimport NftImagesUpload from \"../NftImagesUpload\";\nimport NftJsonFilesUpload from \"../NftJsonFilesUpload\";\nimport EmployeesUpload from \"../EmployeesUpload\";\nimport IpfsImagesGallery from \"../IpfsImagesGallery\";\n\nimport React from 'react';\nimport {useState} from \"react\";\n\nfunction Main() {\n\n    const [cid, setCid] = useState(\"\");\n    const [ipfsImagesList, setIpfsImagesList] = useState([]);\n    const [jsonFilesList, setJsonFilesList] = useState([]);\n    const [employeesList, setEmployeesList] = useState([]);\n\n\n    const  setUploadedIpfsImagesList = async (childData) => {\n       setIpfsImagesList(childData);\n        if (childData[0]) {\n            setCid(childData[0].cid)\n        }\n\n    }\n\n    const setUploadedJsonFilesList = (childData) => {\n        setJsonFilesList(childData);\n        console.log('jsonFilesList');\n        console.log(childData);\n    }\n\n    const setUploadedEmployeesList = (childData) => {\n        setEmployeesList(childData);\n        console.log('employeesList');\n        console.log(childData);\n    }\n\n    return (\n                <div className=\"container\">\n                    <Workflow/>\n                    <hr/>\n                    <Gallery />\n                    <hr/>\n                    <NftImagesUpload setUploadedIpfsImagesList={setUploadedIpfsImagesList}/>\n                    <hr/>\n                    <IpfsImagesGallery images={ipfsImagesList}/>\n                    <hr/>\n                    <NftJsonFilesUpload setUploadedJsonFilesList={setUploadedJsonFilesList} cid={cid}/>\n                    <hr/>\n                    <EmployeesUpload setUploadedEmployeesList={setUploadedEmployeesList} cid={cid}/>\n                    <hr/>\n                    <SmartContractInteraction jsonFilesList={jsonFilesList} employeesList={employeesList}/>\n                </div>\n    );\n}\n\nexport default Main;\n","import {EthProvider} from \"./contexts/EthContext\";\nimport \"./App.css\";\nimport React from 'react';\nimport Main from \"./components/Main\"\n\nfunction App() {\n    return (\n        <EthProvider>\n            <div id=\"App\">\n                <Main />\n            </div>\n        </EthProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}